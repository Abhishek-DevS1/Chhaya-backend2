# Generated by Django 5.1.3 on 2025-03-26 10:16

import datetime
import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('address_type', models.CharField(blank=True, choices=[('PERMANENT', 'Permanent'), ('CURRENT', 'Current'), ('OLD', 'Old'), ('HOME', 'Home'), ('OFFICE', 'Office')], db_index=True, max_length=50, null=True)),
                ('street', models.CharField(blank=True, max_length=50, null=True)),
                ('appartment_no', models.CharField(blank=True, max_length=50, null=True)),
                ('appartment_name', models.CharField(blank=True, max_length=50, null=True)),
                ('village', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('district', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('state', models.CharField(blank=True, choices=[('Andhra Pradesh', 'Andhra Pradesh'), ('Arunachal Pradesh', 'Arunachal Pradesh'), ('Assam', 'Assam'), ('Bihar', 'Bihar'), ('Chhattisgarh', 'Chhattisgarh'), ('Goa', 'Goa'), ('Gujarat', 'Gujarat'), ('Haryana', 'Haryana'), ('Himachal Pradesh', 'Himachal Pradesh'), ('Jharkhand', 'Jharkhand'), ('Karnataka', 'Karnataka'), ('Kerala', 'Kerala'), ('Madhya Pradesh', 'Madhya Pradesh'), ('Maharashtra', 'Maharashtra'), ('Manipur', 'Manipur'), ('Meghalaya', 'Meghalaya'), ('Mizoram', 'Mizoram'), ('Nagaland', 'Nagaland'), ('Odisha', 'Odisha'), ('Punjab', 'Punjab'), ('Rajasthan', 'Rajasthan'), ('Sikkim', 'Sikkim'), ('Tamil Nadu', 'Tamil Nadu'), ('Telangana', 'Telangana'), ('Tripura', 'Tripura'), ('Uttar Pradesh', 'Uttar Pradesh'), ('Uttarakhand', 'Uttarakhand'), ('West Bengal', 'West Bengal')], db_index=True, max_length=50, null=True)),
                ('pincode', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('country', models.CharField(blank=True, choices=[('India', 'India'), ('United States of America', 'United States of America'), ('China', 'China'), ('Japan', 'Japan'), ('Germany', 'Germany'), ('United Kingdom', 'United Kingdom'), ('France', 'France'), ('Brazil', 'Brazil'), ('Australia', 'Australia'), ('Canada', 'Canada'), ('Russia', 'Russia'), ('Italy', 'Italy'), ('South Korea', 'South Korea'), ('Mexico', 'Mexico'), ('South Africa', 'South Africa'), ('Indonesia', 'Indonesia'), ('Saudi Arabia', 'Saudi Arabia'), ('Turkey', 'Turkey'), ('Spain', 'Spain'), ('Netherlands', 'Netherlands')], db_index=True, default='India', help_text='Country code or ID', max_length=50, null=True)),
                ('landmark_details', models.CharField(blank=True, max_length=200, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, null=True, srid=4326)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('country_code', models.CharField(blank=True, db_index=True, max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(blank=True, choices=[('fir', 'FIR'), ('id', 'ID'), ('dna_report', 'DNA Report'), ('postmortem_report', 'Postmortem Report'), ('fingerprint_report', 'Fingerprint Report')], max_length=20, null=True)),
                ('document', models.FileField(blank=True, null=True, upload_to='documents/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Hospital',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('hospital_photo', models.ImageField(blank=True, null=True, upload_to='Hospitals_photos/')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('gvt', 'Government'), ('nongvt', 'Non-Government')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Mainapp.address')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('Missing Person', 'Missing Person'), ('Unidentified Person', 'Unidentified Person'), ('Unidentified Body', 'Unidentified Body')], db_index=True, max_length=20)),
                ('full_name', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('birth_date', models.DateField(blank=True, db_index=True, null=True)),
                ('age', models.IntegerField(blank=True, db_index=True, null=True)),
                ('birthtime', models.TimeField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], db_index=True, max_length=10, null=True)),
                ('birthplace', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('height', models.IntegerField(blank=True, db_index=True, help_text='Height in CM', null=True)),
                ('weight', models.IntegerField(blank=True, db_index=True, help_text='Weight in GMS', null=True)),
                ('blood_group', models.CharField(blank=True, choices=[('O+', 'O+'), ('O-', 'O-'), ('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-')], db_index=True, max_length=5, null=True)),
                ('complexion', models.CharField(blank=True, choices=[('dark', 'Dark'), ('medium', 'Medium'), ('light', 'Light'), ('fair', 'Fair'), ('dusky', 'Dusky'), ('wheatish', 'Wheatish')], db_index=True, max_length=50, null=True)),
                ('hair_color', models.CharField(blank=True, choices=[('black', 'Black'), ('blue', 'Blue'), ('brown', 'Brown'), ('gray', 'Gray'), ('green', 'Green'), ('purple', 'Purple'), ('red', 'Red'), ('white', 'White'), ('yellow', 'Yellow')], db_index=True, max_length=50, null=True)),
                ('hair_type', models.CharField(blank=True, choices=[('STRAIGHT', 'Straight'), ('DASHED', 'Dashed'), ('DOTTED', 'Dotted'), ('LONG', 'Long'), ('BROAD', 'Broad'), ('SHORT', 'Short'), ('WAVY', 'Wavy')], db_index=True, max_length=10, null=True)),
                ('eye_color', models.CharField(blank=True, choices=[('BLUE', 'Blue'), ('BROWN', 'Brown'), ('GREEN', 'Green'), ('HAZEL', 'Hazel'), ('RED', 'Red'), ('BLACK', 'Black'), ('GRAY', 'Gray'), ('YELLOW', 'Yellow'), ('VIOLET', 'Violet')], db_index=True, max_length=50, null=True)),
                ('condition', models.CharField(blank=True, choices=[('MEMORY_LOSS', 'Memory Loss'), ('ANXIETY', 'Anxiety'), ('SHOCK', 'Shock'), ('DEPRESSION', 'Depression'), ('FATIGUE', 'Fatigue'), ('HEADACHE', 'Headache'), ('DIZZINESS', 'Dizzy'), ('NAUSEARCH', 'Nausea'), ('CHEST_PAIN', 'Chest Pain')], db_index=True, max_length=20, null=True)),
                ('Body_Condition', models.CharField(blank=True, choices=[('DECOMPOSED', 'Decomposed'), ('INTACT', 'Intact'), ('SKELETAL', 'Skeletal'), ('BURNT', 'Burnt'), ('FRESH', 'Fresh'), ('NORMAL', 'Normal'), ('UNSTABLE', 'Unstable'), ('STABLE', 'Stable'), ('EXCESS', 'Excess'), ('UNDERWEIGHT', 'Underweight'), ('OVERWEIGHT', 'Overweight'), ('OBESE', 'Obese')], db_index=True, max_length=50, null=True)),
                ('birth_mark', models.CharField(blank=True, max_length=50, null=True)),
                ('distinctive_mark', models.CharField(blank=True, max_length=50, null=True)),
                ('document_ids', models.TextField(blank=True, help_text='Comma-separated document IDs', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('_is_deleted', models.BooleanField(db_index=True, default=False)),
                ('_is_confirmed', models.BooleanField(db_index=True, default=False)),
                ('photo_photo', models.ImageField(blank=True, help_text='URL or Base64 encoded photo of the person', null=True, upload_to='All_Photos')),
                ('date_reported', models.DateField(default=datetime.date.today)),
                ('case_status', models.CharField(choices=[('Resolved', 'resolved'), ('Pending', 'pending'), ('Matched', 'matched')], db_index=True, default='pending', max_length=10)),
                ('address_type', models.CharField(blank=True, choices=[('PERMANENT', 'Permanent'), ('CURRENT', 'Current'), ('OLD', 'Old'), ('HOME', 'Home'), ('OFFICE', 'Office')], db_index=True, max_length=50, null=True)),
                ('street', models.CharField(blank=True, max_length=50, null=True)),
                ('appartment_no', models.CharField(blank=True, max_length=50, null=True)),
                ('appartment_name', models.CharField(blank=True, max_length=50, null=True)),
                ('village', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('district', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('state', models.CharField(blank=True, choices=[('Andhra Pradesh', 'Andhra Pradesh'), ('Arunachal Pradesh', 'Arunachal Pradesh'), ('Assam', 'Assam'), ('Bihar', 'Bihar'), ('Chhattisgarh', 'Chhattisgarh'), ('Goa', 'Goa'), ('Gujarat', 'Gujarat'), ('Haryana', 'Haryana'), ('Himachal Pradesh', 'Himachal Pradesh'), ('Jharkhand', 'Jharkhand'), ('Karnataka', 'Karnataka'), ('Kerala', 'Kerala'), ('Madhya Pradesh', 'Madhya Pradesh'), ('Maharashtra', 'Maharashtra'), ('Manipur', 'Manipur'), ('Meghalaya', 'Meghalaya'), ('Mizoram', 'Mizoram'), ('Nagaland', 'Nagaland'), ('Odisha', 'Odisha'), ('Punjab', 'Punjab'), ('Rajasthan', 'Rajasthan'), ('Sikkim', 'Sikkim'), ('Tamil Nadu', 'Tamil Nadu'), ('Telangana', 'Telangana'), ('Tripura', 'Tripura'), ('Uttar Pradesh', 'Uttar Pradesh'), ('Uttarakhand', 'Uttarakhand'), ('West Bengal', 'West Bengal'), ('Delhi', 'Delhi')], db_index=True, max_length=50, null=True)),
                ('pincode', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('country', models.CharField(blank=True, choices=[('India', 'India'), ('United States of America', 'United States of America'), ('China', 'China'), ('Japan', 'Japan'), ('Germany', 'Germany'), ('United Kingdom', 'United Kingdom'), ('France', 'France'), ('Brazil', 'Brazil'), ('Australia', 'Australia'), ('Canada', 'Canada'), ('Russia', 'Russia'), ('Italy', 'Italy'), ('South Korea', 'South Korea'), ('Mexico', 'Mexico'), ('South Africa', 'South Africa'), ('Indonesia', 'Indonesia'), ('Saudi Arabia', 'Saudi Arabia'), ('Turkey', 'Turkey'), ('Spain', 'Spain'), ('Netherlands', 'Netherlands')], db_index=True, default='India', help_text='Country code or ID', max_length=50, null=True)),
                ('landmark_details', models.CharField(blank=True, max_length=200, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, db_index=True, null=True, srid=4326)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('country_code', models.CharField(blank=True, db_index=True, max_length=10, null=True)),
                ('reported_date', models.DateField(default=django.utils.timezone.now)),
                ('match_entity_id', models.UUIDField(blank=True, help_text='ID of the matched entity (Missing/Unidentified Person/Body)', null=True)),
                ('match_with', models.CharField(blank=True, choices=[('Missing Person', 'missing person'), ('Unidentified Person', 'unidentified person'), ('Unidentified Body', 'unidentified body')], help_text='The type of the matched entity', max_length=20, null=True)),
                ('hospital', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Mainapp.hospital')),
            ],
        ),
        migrations.CreateModel(
            name='Consent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data', models.TextField(blank=True, null=True)),
                ('is_consent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Mainapp.document')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='consent', to='Mainapp.person')),
            ],
        ),
        migrations.AddField(
            model_name='address',
            name='person',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='addresses', to='Mainapp.person'),
        ),
        migrations.CreateModel(
            name='PoliceStation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the police station', max_length=150, unique=True)),
                ('phone_no', models.CharField(blank=True, help_text='Contact number of the police station', max_length=13, null=True)),
                ('station_photo', models.ImageField(blank=True, null=True, upload_to='police_station_photos/')),
                ('activ_Status', models.CharField(blank=True, choices=[('Active', 'Active'), ('Inactive', 'Inactive')], default='Active', max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='police_stations', to='Mainapp.address')),
            ],
        ),
        migrations.CreateModel(
            name='Volunteer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_name', models.CharField(db_index=True, max_length=255)),
                ('dob', models.DateField(db_index=True, help_text='Date of Birth')),
                ('photo_upload', models.ImageField(blank=True, db_index=True, null=True, upload_to='Volunteer/')),
                ('Age', models.PositiveIntegerField(blank=True, db_index=True, null=True)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Transgender', 'Transgender')], db_index=True, max_length=20)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('volunteer_group', models.CharField(choices=[('Group A', 'Group A'), ('Group B', 'Group B'), ('Group C', 'Group C')], db_index=True, max_length=50)),
                ('assigned_region', models.CharField(db_index=True, help_text='Region assigned to the volunteer', max_length=100)),
                ('search_start_date', models.DateField(db_index=True)),
                ('search_end_date', models.DateField(blank=True, db_index=True, null=True)),
                ('search_timing', models.TimeField(db_index=True, help_text="Timing for the volunteer's search")),
                ('gps_tracker_enabled', models.BooleanField(db_index=True, default=False, help_text='Does the volunteer have GPS tracking?')),
                ('mode_of_search', models.CharField(choices=[('On Foot', 'On Foot'), ('Vehicle', 'Vehicle'), ('Drone', 'Drone')], db_index=True, max_length=50)),
                ('other_equipment_issued', models.TextField(blank=True, db_index=True, max_length=100, null=True)),
                ('blood_group', models.CharField(choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], db_index=True, max_length=20)),
                ('known_allergies', models.TextField(blank=True, db_index=True, max_length=100, null=True)),
                ('pre_existing_medical_conditions', models.TextField(blank=True, db_index=True, max_length=200, null=True)),
                ('emergency_contact_name', models.CharField(db_index=True, max_length=50)),
                ('emergency_contact_number', models.CharField(db_index=True, max_length=15)),
                ('relationship_with_volunteer', models.CharField(db_index=True, help_text='Relationship with the volunteer (e.g., Father, Mother, Spouse)', max_length=50)),
                ('feedback_after_search', models.TextField(blank=True, db_index=True, max_length=200, null=True)),
                ('issues_faced_during_search', models.TextField(blank=True, db_index=True, max_length=200, null=True)),
                ('additional_suggestions', models.TextField(blank=True, db_index=True, max_length=200, null=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'indexes': [models.Index(fields=['full_name', 'dob', 'gender', 'photo_upload', 'is_active'], name='Mainapp_vol_full_na_2b9b49_idx'), models.Index(fields=['volunteer_group', 'assigned_region', 'search_start_date', 'search_end_date', 'search_timing'], name='Mainapp_vol_volunte_f8ff26_idx'), models.Index(fields=['gps_tracker_enabled', 'mode_of_search', 'other_equipment_issued'], name='Mainapp_vol_gps_tra_8084a6_idx'), models.Index(fields=['blood_group', 'known_allergies', 'pre_existing_medical_conditions'], name='Mainapp_vol_blood_g_ca0580_idx'), models.Index(fields=['emergency_contact_name', 'emergency_contact_number', 'relationship_with_volunteer'], name='Mainapp_vol_emergen_44f37a_idx'), models.Index(fields=['feedback_after_search', 'issues_faced_during_search', 'additional_suggestions'], name='Mainapp_vol_feedbac_b66f22_idx'), models.Index(fields=['is_deleted'], name='Mainapp_vol_is_dele_dbd18d_idx')],
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone_no', models.CharField(blank=True, db_index=True, max_length=13, null=True)),
                ('country_cd', models.CharField(blank=True, db_index=True, help_text='Country Code', max_length=5, null=True)),
                ('email_id', models.EmailField(blank=True, db_index=True, max_length=150, null=True)),
                ('type', models.CharField(choices=[('personal', 'Personal'), ('office', 'Office'), ('home', 'Home')], max_length=10)),
                ('company_name', models.CharField(blank=True, max_length=100, null=True)),
                ('job_title', models.CharField(blank=True, max_length=50, null=True)),
                ('website_url', models.TextField(blank=True, null=True)),
                ('social_media_availability', models.CharField(blank=True, choices=[('fb', 'Facebook'), ('insta', 'Instagram'), ('x', 'X (Twitter)'), ('thread', 'Threads')], max_length=10, null=True)),
                ('social_media_url', models.CharField(blank=True, null=True)),
                ('additional_details', models.TextField(blank=True, null=True)),
                ('is_primary', models.BooleanField(db_index=True, default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('hospital', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hospital_contact', to='Mainapp.hospital')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contacts', to='Mainapp.person')),
                ('police_station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='police_contact', to='Mainapp.policestation')),
                ('volunteer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='volunteer_contact', to='Mainapp.volunteer')),
            ],
        ),
        migrations.AddField(
            model_name='address',
            name='volunteer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='volunteer_Address', to='Mainapp.volunteer'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_type', models.CharField(choices=[('reporting', 'Reporting'), ('volunteer', 'Volunteer'), ('family', 'Family'), ('admin', 'Admin'), ('police_station', 'Police Station'), ('medical_staff', 'Medical Staff')], default='reporting', max_length=20)),
                ('sub_user_type', models.CharField(blank=True, default='', max_length=20)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email_id', models.EmailField(max_length=50, unique=True)),
                ('phone_no', models.CharField(max_length=10, unique=True)),
                ('country_code', models.CharField(blank=True, max_length=5, null=True)),
                ('password', models.CharField(max_length=255)),
                ('password2', models.CharField(blank=True, max_length=255, null=True)),
                ('salt', models.CharField(blank=True, max_length=7, null=True)),
                ('is_consent', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('inactive', 'Inactive'), ('hold', 'Hold')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.UUIDField(blank=True, null=True)),
                ('updated_by', models.UUIDField(blank=True, null=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('consent_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Mainapp.consent')),
                ('contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_contact', to='Mainapp.contact')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Mainapp.person')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='policestation',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='policestation',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='person',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='person',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('Matched', 'matched')], default='Matched', max_length=10)),
                ('match_with', models.CharField(blank=True, choices=[('Missing Person', 'Missing Person'), ('Unidentified Person', 'Unidentified Person'), ('Unidentified Body', 'Unidentified Body')], help_text='The type of the matched entity', max_length=20, null=True)),
                ('score', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('match_person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches_received', to='Mainapp.person')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches_initiated', to='Mainapp.person')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LastKnownDetails',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('person_photo', models.ImageField(blank=True, help_text='URL or Base64 encoded photo of the person', null=True, upload_to='All_Photos')),
                ('reference_photo', models.ImageField(blank=True, help_text='URL or Base64 encoded reference photo', null=True, upload_to='All_Photos')),
                ('missing_time', models.TimeField(blank=True, help_text='Exact time the person was last seen', null=True)),
                ('missing_date', models.DateField(blank=True, help_text='Date the person went missing', null=True)),
                ('last_seen_location', models.TextField(blank=True, db_index=True, null=True)),
                ('missing_location_details', models.TextField(blank=True, db_index=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Mainapp.address')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_known_details', to='Mainapp.person')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='hospital',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='hospital',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='FIR',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('fir_number', models.CharField(blank=True, help_text='Unique FIR number', max_length=50, null=True)),
                ('case_status', models.CharField(blank=True, choices=[('Open', 'Open'), ('Closed', 'Closed'), ('In Progress', 'In Progress'), ('Resolved', 'Resolved'), ('Pending', 'Pending')], default='Open', max_length=50, null=True)),
                ('investigation_officer_name', models.CharField(blank=True, help_text='Name of the investigation officer', max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Mainapp.document')),
                ('investigation_officer_contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Mainapp.contact')),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='firs', to='Mainapp.person')),
                ('police_station', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Mainapp.policestation')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='document',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='document',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contact',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contact',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contact',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='consent',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='consent',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('admin', 'Admin'), ('subadmin', 'Sub-Admin'), ('backend_user', 'Backend User'), ('surveyor', 'Surveyor')], max_length=20)),
                ('permission', models.JSONField(help_text='Stores role-based permissions in JSON format')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('dob', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Mainapp.address')),
                ('contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Mainapp.contact')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='address',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='address',
            name='updated_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='address',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='AdditionalInfo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('caste', models.CharField(blank=True, choices=[('sc', 'Scheduled Caste (SC)'), ('st', 'Scheduled Tribe (ST)'), ('obc', 'Other Backward Class (OBC)'), ('open', 'Open/General')], max_length=10, null=True)),
                ('subcaste', models.CharField(blank=True, max_length=50, null=True)),
                ('marital_status', models.CharField(choices=[('married', 'Married'), ('single', 'Single'), ('divorced', 'Divorced'), ('widow', 'Widow/Widower')], max_length=10)),
                ('religion', models.CharField(blank=True, choices=[('hindu', 'Hindu'), ('muslim', 'Muslim'), ('sikh', 'Sikh'), ('cristian', 'Cristian')], max_length=50, null=True)),
                ('mother_tongue', models.CharField(blank=True, choices=[('hindi', 'Hindi'), ('english', 'English'), ('bengali', 'Bengali'), ('malayalam', 'Malayalam'), ('tamil', 'Tamil'), ('telegram', 'Telegram'), ('other', 'Other')], max_length=50, null=True)),
                ('other_known_languages', models.CharField(blank=True, help_text='Comma-separated languages', max_length=50, null=True)),
                ('id_type', models.CharField(blank=True, choices=[('aadhar', 'Aadhar'), ('pan', 'PAN'), ('dl', 'Driving License'), ('passport', 'Passport')], max_length=100, null=True)),
                ('id_no', models.CharField(help_text='Unique identification number', max_length=100)),
                ('education_details', models.CharField(blank=True, max_length=50, null=True)),
                ('occupation_details', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='additional_info', to='Mainapp.person')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PersonUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Mainapp.person')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_%(class)s_set', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_%(class)s_set', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('person', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['type', 'full_name', 'birth_date', 'age', 'gender'], name='Mainapp_per_type_bb8640_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['height', 'weight', 'blood_group', 'complexion'], name='Mainapp_per_height_4771ba_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['eye_color', 'hair_type', 'hair_color', 'condition'], name='Mainapp_per_eye_col_72eecc_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['distinctive_mark', 'birth_mark', 'Body_Condition'], name='Mainapp_per_distinc_d88337_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['hospital', 'document_ids'], name='Mainapp_per_hospita_43a42e_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['created_by', 'updated_by'], name='Mainapp_per_created_1ce21d_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['_is_deleted', '_is_confirmed'], name='Mainapp_per__is_del_4e276a_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['match_entity_id'], name='Mainapp_per_match_e_cf7d08_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='match',
            unique_together={('person', 'match_person')},
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['phone_no'], name='Mainapp_con_phone_n_9fee8b_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['email_id'], name='Mainapp_con_email_i_b9a834_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['country_cd'], name='Mainapp_con_country_69864b_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['address_type', 'city', 'state', 'pincode'], name='Mainapp_add_address_967e45_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['country', 'district'], name='Mainapp_add_country_e1cb1d_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['person', 'user'], name='Mainapp_add_person__5b836e_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['created_at', 'updated_at'], name='Mainapp_add_created_6b1163_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['location'], name='Mainapp_add_locatio_83c558_idx'),
        ),
    ]
